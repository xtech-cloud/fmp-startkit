@page "/xtc/startkit/healthy"

<Space Direction="DirectionVHType.Vertical">
    <SpaceItem>
        <Text>Request: Healthy.Echo</Text>
        <Input Placeholder="Message" @bind-Value="@reqMsg" />
    </SpaceItem>
    <SpaceItem>
        <Button Type="@ButtonType.Primary" OnClick="@onClick">Call</Button>
    </SpaceItem>
    <SpaceItem>
        <Text>Response:</Text>
        <Input @bind-Value="@rspMsg" ReadOnly="true" />
    </SpaceItem>
</Space>

@inject Framework framework_;
@inject Logger logger_;

@code {
    public class HealthyUiBridge : IHealthyUiBridge
    {
        private HealthyComponent razor_;

        public HealthyUiBridge(HealthyComponent _razor)
        {
            razor_ = _razor;
        }

        public void Alert(string _code, string _message)
        {
            razor_.rspMsg = string.Format(_message);
        }

        public void RefreshEcho(IDTO _dto)
        {
            var dto = _dto as EchoResponseDTO;
            razor_.rspMsg = dto?.msg ?? "";
        }
    }

    private string? rspMsg;
    private string? reqMsg;
    private HealthyFacade? facade_;

    private HealthyFacade? facade
    {
        get
        {
            if (null == facade_)
            {
                if (null == framework_)
                {
                    logger_.Error("framework_ is null");
                    return null;
                }
                var entry = framework_.FindUserData("XTC.FMP.MOD.StartKit.LIB.MVCS.Entry") as Entry;
                if (null == entry)
                {
                    logger_.Error("entry is null");
                    return null;
                }
                facade_ = entry?.getFacade();
                if (null == facade_)
                {
                    logger_.Error("facade_ is null");
                    return null;
                }
                facade_?.setUiBridge(new HealthyUiBridge(this));
            }
            return facade_;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task onClick()
    {
        var dto = new EchoResponseDTO();
        dto.msg = reqMsg;
        var bridge = (facade?.getViewBridge() as IHealthyViewBridge);
        if (null == bridge)
        {
            logger_.Error("bridge is null");
            return;
        }
        logger_.Trace("invoke OnEchoSubmit");
        await bridge.OnEchoSubmit(dto);
    }
}
