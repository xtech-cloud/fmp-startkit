
//*************************************************************************************
//   !!! Generated by the fmp-cli.  DO NOT EDIT!
//*************************************************************************************

using System.Threading.Tasks;
using Grpc.Net.Client;
using XTC.FMP.LIB.MVCS;
using XTC.FMP.MOD.StartKit.LIB.Proto;

namespace XTC.FMP.MOD.StartKit.LIB.MVCS
{
    /// <summary>
    /// Healthy服务层基类
    /// </summary>
    public class HealthyBaseService : Service
    {
        /// <summary>
        /// 带uid参数的构造函数
        /// </summary>
        /// <param name="_uid">实例化后的唯一识别码</param>
        public HealthyBaseService(string _uid) : base(_uid)
        {

        }

        /// <summary>
        /// 注入GRPC通道
        /// </summary>
        /// <param name="_channel">GRPC通道</param>
        public void InjectGrpcChannel(GrpcChannel? _channel)
        {
            grpcChannel_ = _channel;
        }


        /// <summary>
        /// 调用Echo
        /// </summary>
        /// <param name="_request">Echo的请求</param>
        /// <returns>错误</returns>
        public async Task<Error> CallEcho(EchoRequest? _request)
        {
            getLogger()?.Trace("Call Echo ...");
            if(null == _request)
            {
                return Error.NewNullErr("parameter:_request is null");
            }
            var client = getGrpcClient();
            if (null == client)
            {
                return Error.NewNullErr("client is null");
            }

            var response = await client.EchoAsync(_request);
            getModel()?.UpdateProtoEcho(response);
            return Error.OK;
        }


        /// <summary>
        /// 获取直系数据层
        /// </summary>
        /// <returns>数据层</returns>
        protected HealthyModel? getModel()
        {
            if(null == model_)
                model_ = findModel(HealthyModel.NAME) as HealthyModel;
            return model_;
        }

        /// <summary>
        /// 获取GRPC客户端
        /// </summary>
        /// <returns>GRPC客户端</returns>
        protected Healthy.HealthyClient? getGrpcClient()
        {
            if (null == grpcChannel_)
                return null;

            if(null == clientHealthy_)
            {
                clientHealthy_ = new Healthy.HealthyClient(grpcChannel_);
            }
            return clientHealthy_;
        }

        /// <summary>
        /// GRPC客户端
        /// </summary>
        protected Healthy.HealthyClient? clientHealthy_;

        /// <summary>
        /// GRPC通道
        /// </summary>
        protected GrpcChannel? grpcChannel_;

        /// <summary>
        /// 直系数据层
        /// </summary>
        private HealthyModel? model_;
    }

}
